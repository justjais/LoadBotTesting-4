---
- name: Copy SSH key to access KVM host 1
  hosts: localhost
  tags: ssh, ssh_copy_id, section_1, kvm_host_1
  connection: local
  become: false
  gather_facts: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  vars:
    ssh_target: ["{{ env.z.lpar1.ip }}", "{{ env.z.lpar1.user }}", "{{ env.z.lpar1.pass }}", "{{ path_to_key_pair }}"]
  tasks:
    - name: Include vars for the KVM host.
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/host_vars/{{ env.z.lpar1.hostname }}.yaml"

    - name: Copy SSH key to KVM host.
      ansible.builtin.import_role:
        name: ssh_copy_id

- name: Copy SSH key to access KVM host 2
  hosts: localhost
  tags: ssh, ssh_copy_id, section_1, kvm_host_2
  connection: local
  become: false
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  vars:
    ssh_target: ["{{ env.z.lpar2.ip }}", "{{ env.z.lpar2.user }}", "{{ env.z.lpar2.pass }}", "{{ path_to_key_pair }}"]
  tasks:
    - name: Include vars for second KVM host.
      when: env.z.lpar2.hostname is defined
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/host_vars/{{ env.z.lpar2.hostname }}.yaml"

    - name: copy SSH key to second KVM host, if cluster is to be highly available.
      tags: ssh_copy_id, ssh
      when: env.z.lpar2.hostname is defined
      ansible.builtin.import_role:
        name: ssh_copy_id

- name: Copy SSH key to access KVM host 3
  hosts: localhost
  tags: ssh, ssh_copy_id, section_1, kvm_host_3
  connection: local
  become: false
  gather_facts: false
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  vars:
    ssh_target: ["{{ env.z.lpar3.ip }}", "{{ env.z.lpar3.user }}", "{{ env.z.lpar3.pass }}", "{{ path_to_key_pair }}"]
  tasks:
    - name: Include vars for third KVM host.
      when: env.z.lpar3.hostname is defined
      ansible.builtin.include_vars:
        file: "{{ inventory_dir }}/host_vars/{{ env.z.lpar3.hostname }}.yaml"

    - name: copy SSH key to third KVM host, if cluster is to be highly available.
      tags: ssh_copy_id, ssh
      when: env.z.lpar3.hostname is defined
      ansible.builtin.import_role:
        name: ssh_copy_id

- name: Prepare KVM host(s)
  hosts: kvm_host
  tags: setup, section_2
  gather_facts: true
  become: true
  vars:
    packages: "{{ env.pkgs.kvm }}"
  roles:
    - { role: attach_subscription, when: env.redhat.attach_subscription }
    - install_packages
    - httpd
  post_tasks:
    - name: Add ports to firewall
      tags: firewall-libvirt, libvirt
      ansible.posix.firewalld:
        port: 80/tcp
        permanent: true
        state: enabled

    - name: Start and enable libvirt
      tags: firewall-libvirt, libvirt
      ansible.builtin.service:
        name: libvirtd
        enabled: true
        state: started

    - name: Permit traffic in libvirt zone
      tags: firewall-libvirt, libvirt
      ansible.posix.firewalld:
        service: http
        permanent: true
        state: enabled
        zone: libvirt
        immediate: true

    - name: Set libvirt management to libvirt group instead of root.
      tags: libvirt
      ansible.builtin.lineinfile:
        path: /etc/libvirt/qemu.conf
        regexp: '#group = "root"'
        line: group = "libvirt"
        backup: true

    - name: Get user home directory
      tags: libvirt
      changed_when: false
      register: user_home
      ansible.builtin.shell: >
        getent passwd {{ ansible_user }} | awk -F: '{ print $6 }'

    - name: Check if directory {{ user_home.stdout }}/.config/libvirt exists
      tags: libvirt
      ansible.builtin.stat:
        path: "{{ user_home.stdout }}/.config/libvirt"
      register: home_config_libvirt

    - name: Create directory {{ user_home.stdout }}/.config/libvirt
      tags: libvirt
      when: home_config_libvirt.stat.exists == false
      ansible.builtin.file:
        path: "{{ user_home.stdout }}/.config/libvirt"
        state: directory

    - name: Create file for user's custom libvirt configurations.
      tags: libvirt
      ansible.builtin.file:
        path: "{{ user_home.stdout }}/.config/libvirt/libvirt.conf"
        state: touch
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Set default uri connection to qemu:///system.
      tags: libvirt
      ansible.builtin.lineinfile:
        path: "{{ item }}"
        regexp: '#uri_default = "qemu:///system"'
        line: uri_default = "qemu:///system"
        backup: true
      loop:
        - /etc/libvirt/qemu.conf
        - "{{ user_home.stdout }}/.config/libvirt/libvirt.conf"
        - /etc/libvirt/libvirt.conf

    - name: Ensure KVM admin user is part of groups 'kvm', 'libvirt'.
      tags: groups, group, libvirt
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        append: true
        groups: kvm,libvirt

    - name: Restart libvirt
      tags: firewall-libvirt, libvirt
      ansible.builtin.service:
        name: libvirtd
        enabled: true
        state: restarted

    - name: Enable cockpit console
      tags: cockpit
      ansible.builtin.command: systemctl enable --now cockpit.socket

- name: Configure ip_forward in case of NAT
  hosts: kvm_host
  tags: cfg_ip_forward, section_2
  gather_facts: true
  become: true
  vars_files:
    - "{{ inventory_dir }}/group_vars/all.yaml"
  tasks:
    - name: Configure ip_forward in case of network "NAT"
      tags: cfg_ip_forward
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: "{{ env.z.ip_forward }}"
        sysctl_set: true
        state: present
        reload: true
      when: env.network_mode | upper == 'NAT'
